import React, { useEffect, useState } from "react";
import {
  Box,
  Flex,
  Button,
  Table,
  Thead,
  Tbody,
  Tr,
  IconButton,
  Th,
  Td,
  TableContainer,
  Spinner,
  Badge,
  Tooltip,
} from "@chakra-ui/react";
import { ArrowBackIcon } from "@chakra-ui/icons";

import Header from "../../Components/Pages/Header";
import Footer from "../../Components/Pages/Footer";
import HeadingButtonSection from "../../Components/Pages/HeadingButtonSection";
import axios from "axios";
import { useNavigate, useParams } from "react-router-dom";

const Reesults = () => {
  const [resultData, setResultData] = useState([]);
  const { assignment_id, course_id } = useParams();

  console.log(resultData.report_url);

  const [loading, setLoading] = useState(true);
  const fetchData = async () => {
    try {
      const token = localStorage.getItem("accessToken");
      const config = { headers: { Authorization: `Bearer ${token}` } };

      const response = await axios.get(
        `https://smartassess-backend-t3l93.ondigitalocean.app/student/assignment/${assignment_id}/result`,
        config
      );

      if (response.status === 200) {
        setResultData(response.data.result);
      }
    } catch (err) {
      console.error("Error fetching student data:", err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const [expandedIndex, setExpandedIndex] = useState(null);

  const toggleExpand = (index) => {
    setExpandedIndex(expandedIndex === index ? null : index);
  };

  const nav = useNavigate();

  console.log(resultData);

  return (
    <Flex direction="column" minH="100vh">
      <Header />
      <Box flex="1" mx={{base:6,lg:12}} overflowY="auto" paddingBottom="80px">
        <Flex
          flexWrap={"wrap"}
          alignItems={"center"}
          justifyContent={"space-between"}
        >
          <IconButton
            aria-label="Go Back"
            icon={<ArrowBackIcon />}
            onClick={() =>
              nav(`/student/uploadAssignment/${assignment_id}/${course_id}`)
            }
            mr={4}
          />
          <Box>
            <HeadingButtonSection
              path="Results"
              content="Marketing"
              showButton={false}
              showBulkAddButton={false}
            />
          </Box>
        </Flex>

        <Flex mb={6} justifyContent={"space-between"} flexWrap={"wrap"} gap={6}>
          <Box flexWrap={"wrap"} display={"flex"} gap={2} alignItems={"center"}>
            {[
              {
                label: `Total Score ${resultData.total_score}/${resultData.total_assignment_grade}`,
                tooltip:
                  "This represents your total score achieved out of the maximum possible.",
              },
              {
                label: `Avg AI Detection ${(
                  resultData?.scores?.ai_detection * 100
                ).toFixed(2)}%`,
                tooltip:
                  "This score indicates the likelihood that content was generated by AI tools like ChatGPT. If AI detection score is greater than 90%, the total score will be zero for that question.",
              },
              {
                label: `Avg Grammar Detection ${(
                  resultData?.scores?.grammar * 100
                ).toFixed(2)}%`,
                tooltip:
                  "This score reflects how grammatically accurate your submission is.",
              },
              {
                label: `Avg Plagiarism Detection ${(
                  resultData?.scores?.plagiarism * 100
                ).toFixed(2)}%`,
                tooltip:
                  "This score shows the similarity of your content with existing sources. If plagiarism score is greater than 90%, the total score will be zero for that question.",
              },
            ].map((item, idx) => (
              <Tooltip key={idx} label={item.tooltip} hasArrow>
                <Badge
                  color="white"
                  bg="blue.500"
                  cursor="pointer"
                  onClick={item.onClick || null}
                >
                  {item.label}
                </Badge>
              </Tooltip>
            ))}
          </Box>
          <Box>
            <Button
              colorScheme="blue"
              onClick={() => {
                window.open(resultData?.report_url, "_blank");
              }}
            >
              Download Report
            </Button>
          </Box>
        </Flex>

        <TableContainer
          mb={12}
          height="100%"
          width={"100%"}
          border="1px solid #e0e0e0"
          boxShadow="lg"
          borderRadius="xl"
        >
          {loading ? (
            <Flex height="300px" justifyContent="center" alignItems="center">
              <Spinner
                size="lg"
                thickness="4px"
                speed="0.65s"
                color="blue.500"
              />
            </Flex>
          ) : (
            <>
              <Table variant="simple">
                <Thead backgroundColor={"#EAEEF0"}>
                  <Tr>
                    <Th>Question</Th>
                    <Th>Student Answer</Th>
                    <Th>Question Score</Th>

                    <Th>Context Score</Th>
                    <Th>Grammar Score</Th>
                    <Th>Plagirism Score</Th>
                    <Th>AI Detection</Th>
                    <Th>Feedback</Th>
                  </Tr>
                </Thead>
                <Tbody>
                  {resultData?.questions?.map((assignment, index) => (
                    <Tr key={index}>
                      <Td
                        onClick={() => toggleExpand(index)}
                        maxW="300px"
                        overflow="hidden"
                        whiteSpace={
                          expandedIndex === index ? "normal" : "nowrap"
                        }
                        textOverflow="ellipsis"
                        cursor="pointer"
                        title={assignment.question_text}
                      >
                        Q#
                        {assignment.question_number} {assignment.question_text}
                      </Td>

                      <Td
                        onClick={() => toggleExpand(index)}
                        maxW="300px"
                        overflow="hidden"
                        whiteSpace={
                          expandedIndex === index ? "normal" : "nowrap"
                        }
                        textOverflow="ellipsis"
                        cursor="pointer"
                        title={assignment.student_answer}
                      >
                        {assignment.student_answer}
                      </Td>
                      <Td>
                        {assignment?.question_score != null
                          ? assignment.question_score.toFixed(2)
                          : "0.00"}
                        /{resultData?.question_total_marks}
                      </Td>
                      <Td>{assignment.context_score}</Td>
                      <Td>{(assignment.grammar_score * 100).toFixed(2)}%</Td>
                      <Td>{(assignment.plagiarism_score * 100).toFixed(2)}%</Td>
                      <Td>{(assignment.ai_score * 100).toFixed(2)}%</Td>

                      <Td>
                        <Box
                          maxW="200px"
                          cursor="pointer"
                          overflow="hidden"
                          textOverflow="ellipsis"
                          whiteSpace={assignment.showFull ? "normal" : "nowrap"}
                          onClick={() =>
                            setResultData((prev) => ({
                              ...prev,
                              questions: prev.questions.map((q, i) =>
                                i === index
                                  ? { ...q, showFull: !q.showFull }
                                  : q
                              ),
                            }))
                          }
                        >
                          {assignment.feedback}
                        </Box>
                      </Td>
                    </Tr>
                  ))}
                </Tbody>
              </Table>
            </>
          )}
        </TableContainer>
      </Box>
      <Footer />
    </Flex>
  );
};

export default Reesults;
